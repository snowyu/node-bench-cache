// Generated by CoffeeScript 1.8.0
(function() {
  var FixedCacheWrapper, LRUCache, LRUCacheWrapper, SecondaryCache, SimpleCache, Table, allCaches, allTypes, benchmark, lruCache, maxCap, random, runBenchmark, sFixedCache, sLruCache, simpleCache, table, toArray, toColumn, toTable;

  Table = require('cli-table');

  SecondaryCache = require('secondary-cache');

  LRUCache = require('lru-cache');

  SimpleCache = require('simple-lru-cache');

  random = Math.random;

  maxCap = 10000;

  benchmark = function(run) {
    var diff, em, heapTotal, heapUsed, sm, start, usedMem;
    start = process.hrtime();
    sm = process.memoryUsage();
    run();
    diff = process.hrtime(start);
    em = process.memoryUsage();
    usedMem = em.rss - sm.rss;
    heapTotal = em.heapTotal - sm.heapTotal;
    heapUsed = em.heapUsed - sm.heapUsed;
    return {

      /*
      console.log("Memory Used: " + (usedMem / 1024) + "KB")
      console.log("Heap Total: " + (heapTotal / 1024) + "KB")
      console.log("Heap Used: " + (heapUsed / 1024) + "KB")
      console.log("Time Cost: " + (diff[0]*1e3+diff[1] / 1e6) + " ms\n")
       */
      memory: usedMem / 1024 / 1024,
      heapTotal: heapTotal / 1024 / 1024,
      heapUsed: heapUsed / 1024 / 1024,
      time: diff[0] * 1e3 + diff[1] / 1e6
    };
  };

  runBenchmark = function(name, cache) {
    return {
      name: name,
      add: benchmark(function() {
        var i, _i;
        for (i = _i = 0; 0 <= maxCap ? _i < maxCap : _i > maxCap; i = 0 <= maxCap ? ++_i : --_i) {
          cache.set('test' + i, random());
        }
      }),
      update: benchmark(function() {
        var i, _i;
        for (i = _i = 0; 0 <= maxCap ? _i < maxCap : _i > maxCap; i = 0 <= maxCap ? ++_i : --_i) {
          cache.set('test' + i, random());
        }
      }),
      get: benchmark(function() {
        var i, _i;
        for (i = _i = 0; 0 <= maxCap ? _i < maxCap : _i > maxCap; i = 0 <= maxCap ? ++_i : --_i) {
          cache.get('test' + i);
        }
      }),
      del: benchmark(function() {
        var i, _i;
        for (i = _i = 0; 0 <= maxCap ? _i < maxCap : _i > maxCap; i = 0 <= maxCap ? ++_i : --_i) {
          cache.del('test' + i);
        }
      }),
      clear: benchmark(function() {
        cache.clear();
      })
    };
  };

  FixedCacheWrapper = function(cache) {
    cache.set = cache.__proto__.setFixed;
    return cache;
  };

  LRUCacheWrapper = function(cache) {
    cache.clear = cache.__proto__.reset;
    return cache;
  };

  lruCache = runBenchmark("lru-cache", LRUCacheWrapper(LRUCache(maxCap)));

  simpleCache = runBenchmark("simple-lru-cache", LRUCacheWrapper(new SimpleCache({
    maxSize: maxCap
  })));

  sFixedCache = runBenchmark("Fixed Cache(seconday)", FixedCacheWrapper(SecondaryCache()));

  sLruCache = runBenchmark("LRU Cache(seconday)", SecondaryCache(maxCap));

  allCaches = [sFixedCache, sLruCache, lruCache, simpleCache];

  allTypes = ['add', 'update', 'get', 'del', 'clear'];

  toArray = function(item, type) {
    var i, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = allTypes.length; _i < _len; _i++) {
      i = allTypes[_i];
      _results.push(item[i][type].toFixed(3));
    }
    return _results;
  };

  toColumn = function(cache, type) {
    var result;
    result = {};
    result[cache.name] = toArray(cache, type);
    return result;
  };

  toTable = function(typeName, type, style) {
    var head, i, result, _i, _len;
    style = {
      head: ['blue'],
      borader: !style ? ['grey'] : void 0
    };
    head = allTypes.slice();
    head.splice(0, 0, typeName);
    result = new Table({
      head: head,
      style: style
    });
    for (_i = 0, _len = allCaches.length; _i < _len; _i++) {
      i = allCaches[_i];
      result.push(toColumn(i, type));
    }
    return result;
  };

  table = toTable("Heap Total(MB)", "heapTotal");

  console.log(table.toString());

  table = toTable("Heap Used(MB)", "heapUsed");

  console.log(table.toString());

  table = toTable("Memory Used(MB)", "memory");

  console.log(table.toString());

  table = toTable("Time Cost(ms)", "time");

  console.log(table.toString());

}).call(this);
